'use strict';
/*1. Объясните почему код даёт именно такие результаты?
Подсказка. Чтобы лучше разобраться возьмите этот код и запустите в отладчике в браузере со
включенными точками остановки.*/

//пример 1
//сначала объявляем переменные используя оператор let
//одновременно с объявлением, переменным a и b присваиваются значения
//затем выполняется инкрементирование в префиксной форме, т.е. 
//сначала значение a увеличивается на 1, а затем присваивается переменной c
let a = 1, b = 1, c, d;
c = ++a;
alert(c); // ответ: 2
//пример 2
//здесь выполняется инкрементирование в постфиксной форме,
//а значит сначала происходит присваивание значения b=1 переменной d, 
//а затем увеличение значения b на 1
d = b++;
alert(d); //ответ: 1
//пример 3
//так как унарный оператор имеет больший приоритет, чем бинарный,
//сначала будет вычислятся выражение ++a
//сначала значение а увеличится на 1, потом выражение ++a вернет 3
//в итоге произойдет сложение 2+3
c = 2 + ++a;
alert(c); //ответ: 5
//пример 4
//сначала вычисляем выражение b++, которое увеличит b на 1 -> b=3,
//однако вернет значение без увеличения(постфиксная форма) -> 2,
//так как нас интересует возвращаемое значение то получаем: 2+2=4
d = 2 + b++;
alert(d); //ответ: 4
alert(a); //3
alert(b); //3

/*2. Чему будут равны переменные x и a в примере ниже? Написать почему так произошло
(описать последовательность действий).*/
//объявим переменную a посредством оператора let
//одновременно присвоим переменной a значение 2
//объявим переменную х, присвоим ей результат выражения в котором:
//сначала вычислим выражение в скобках(по наивысшему приоритету), a*=2 -> a = a*2 -> 4,
//и прибавим 1 -> 5
a = 2;
let x = 1 + (a *= 2);

/*3. Объявить две переменные a и b и задать им целочисленные произвольные начальные
значения.
Затем написать скрипт, который работает по следующему принципу:
- если a и b положительные, вывести их разность (ноль можно считать положительным числом);
- если а и b отрицательные, вывести их произведение;
- * (этот пункт посложнее, делайте по желанию) если а и b разных знаков, вывести их сумму;*/
a = Number(prompt("Введите первое целое число"));
b = Number(prompt("Введите второе целое число"));

if (a >= 0 && b >= 0) {
    alert(`Разность равна ${a - b}`)
}
else if (a < 0 && b < 0) {
    alert(`Произведение равно ${a * b}`)
}
else {
    alert(`Сумма равна ${a + b}`)
}

/*4. Реализовать основные 4 арифметические операции (+, -, /, *) в виде функций с двумя
параметрами. Т.е. например, функция для сложения должна принимать два числа, складывать их
и возвращать результат.
Обязательно использовать оператор return.*/

/**
 * функция складывает два числа
 * @param {number} a первое переданное в функцию число
 * @param {number} b второе переданное в функцию число
 * @returns {number} вернет результат сложения 
 */
function makeAdd(a, b) {
    return a + b;
}

/**
 * функция вычитает одно число из другого
 * @param {number} a число из которого вычитаем
 * @param {number} b число которое вычитаем
 * @returns {number} вернет результат вычитания
 */
function makeSubtract(a, b) {
    return a - b;
}

/**
 * функция умножает два числа
 * @param {number} a первый множитель
 * @param {number} b второй множитель
 * @returns {number} результат произведения двух чисел
 */
function makeMult(a, b) {
    return a * b;
}

/**
 * функция делит одно число на другое
 * @param {number} a делимое
 * @param {number} b делитель
 * @returns {number} результат деления двух чисел
 */
function makeDivision(a, b) {
    return a / b;

}


alert(makeAdd(1, 2));
alert(makeSubtract(10, 7));
alert(makeMult(1, 3));
alert(makeDivision(12, 4));

/*5. Реализовать функцию с тремя параметрами: function mathOperation(arg1, arg2, operation),
где arg1, arg2 – значения аргументов, operation – строка с названием операции. В зависимости от
переданного значения операции (использовать switch) выполнить одну из арифметических
операций
(использовать функции из задания 4) и вернуть полученное значение.*/
/**
 * функция производит арифметические действия по выбору
 * @param {number} arg1 первое число
 * @param {number} arg2 второе число
 * @param {string} operation вид арифметического действия
 * @returns {number} возвращает результат
 */
function mathOperation(arg1, arg2, operation) {
    switch (operation) {
        case "сложение":
            return makeAdd(arg1, arg2);
        case "вычитание":
            return makeSubtract(arg1, arg2);
        case "умножение":
            return makeMult(arg1, arg2);
        case "деление":
            return makeDivision(arg1, arg2);
    }
}

let operate = prompt("Выберите действие");
alert(mathOperation(4, 5, operate));

/*6**. (Это задание не является частью курса, можете его не делать, оно для тех кому мало
обычных заданий, требует времени и возможно гугления, делайте по желанию.)
Программа должна спросить у пользователя число, это будет количество денег, которое он хочет
положить на счет в банке. Затем программа должна выдать примерно такое сообщение:
"Ваша сумма в 101 рубль успешно зачислена." - в случае если пользователь ввел 101.
"Ваша сумма в 10020 рублей успешно зачислена." - в случае если пользователь ввел 10020.
"Ваша сумма в 120104 рубля успешно зачислена." - в случае если пользователь ввел 120104.
То есть ваша задача выводить слово «рубль» в правильном падеже, в зависимости от введенного
числа.*/


// let amountMoney = (prompt("Введите сумму для зачисления на счет"))
// let ending = amountMoney.slice(-2)
// let end = +ending

let amountMoney = (prompt("Введите сумму для зачисления на счет"))
/**
 * функция для правильного отображения окончаний
 * @param {string} money принимает сумму в виде строки
 * @returns {string} возвращает денежную единицу
 */
function toEnd(money) {
    //возьмем срез строки, с конца два символа 
    let ending = amountMoney.slice(-2)
    //приведем строку к числу
    let end = +ending
    switch (true) {
        case end === 1:
            return "рубль"
        case end > 1 && end < 5:
            return "рубля"
        case end === 0:
        case end > 4 && end < 9:
        case end > 9:
            return "рублей"
    }

}

alert(`Ваша сумма в ${amountMoney} ${toEnd(amountMoney)} успешно зачислена.`)

